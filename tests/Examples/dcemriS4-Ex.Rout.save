
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dcemriS4"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dcemriS4')
Loading required package: oro.nifti
Loading required package: XML

oro.nifti: Rigorous - NIfTI Input / Output (version = 0.2.0)

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aif")
> ### * aif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arterial Input Functions
> ### Title: Arterial Input Functions
> ### Aliases: aif.orton.exp model.orton.exp orton.exp.lm
> ### Keywords: models
> 
> ### ** Examples
> 
> data("buckley")
> ## Generate AIF params using the orton.exp function from Buckley's AIF
> xi <- seq(5, 300, by=5)
> time <- buckley$time.min[xi]
> aif <- buckley$input[xi]
> aifparams <- orton.exp.lm(time, aif)
Loading required package: minpack.lm
> aifparams$D <- 1 
> unlist(aifparams[1:4])
         AB         muB          AG         muG 
37.14839724  3.89505419  1.51615437 -0.01066073 
> 
> aoe <- aif.orton.exp(time, aifparams$AB, aifparams$muB, aifparams$AG,
+                      aifparams$muG)
> with(buckley, plot(time.min, input, type="l", lwd=2))
> lines(time, aoe, lwd=2, col=2)
> legend("right", c("Buckley's AIF", "Our approximation"), lty=1,
+        lwd=2, col=1:2)
> cbind(time, aif, aoe)[1:10,]
            time      aif      aoe
 [1,] 0.06666667 0.912633 2.257999
 [2,] 0.15000000 2.807515 3.779938
 [3,] 0.23333333 4.915784 4.402029
 [4,] 0.31666667 5.942284 4.506283
 [5,] 0.40000000 4.981387 4.332075
 [6,] 0.48333333 4.016821 4.025864
 [7,] 0.56666667 3.326276 3.674314
 [8,] 0.65000000 2.873297 3.326189
 [9,] 0.73333333 2.580520 3.006703
[10,] 0.81666667 2.383784 2.726830
> 
> 
> 
> cleanEx()

detaching ‘package:minpack.lm’

> nameEx("conv_fft")
> ### * conv_fft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conv.fft
> ### Title: Convolution of 3D Arrays using the Fourier Transform
> ### Aliases: conv.fft
> 
> ### ** Examples
> 
> cube <- array(0, c(20,20,1))
> cube[9:12,9:12,1] <- 1
> tkernel <- array(0, c(20,20,1))
> tkernel[,,1] <- c(.5, 1, .5, rep(0,20-3)) 
> tcenter <- find.center(ifelse(tkernel > 0, TRUE, FALSE))
> out <- conv.fft(tkernel, cube, tcenter)
> out[8:13,8:13,1]  ## text output
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    2    2    2    2    2    2
[2,]    6    6    6    6    6    6
[3,]    8    8    8    8    8    8
[4,]    8    8    8    8    8    8
[5,]    6    6    6    6    6    6
[6,]    2    2    2    2    2    2
> 
> par(mfrow=c(2,2))  ## graphic output
> image(drop(tkernel), col=tim.colors(), main="Template")
Loading required package: splines
> image(drop(cube), col=tim.colors(), main="Target")
> image(drop(out), col=tim.colors(), main="Output")
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:splines’

> nameEx("dce_bayes")
> ### * dce_bayes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.bayes
> ### Title: Bayesian Methods for Pharmacokinetic Modeling of Dynamic
> ###   Contrast-Enhanced MRI Data
> ### Aliases: dcemri.bayes dcemri.bayes,array-method dcemri.bayes.single
> ### Keywords: models
> 
> ### ** Examples
> 
> data("buckley")
> xi <- seq(5, 300, by=5)
> img <- array(t(breast$data)[,xi], c(13,1,1,60))
> mask <- array(TRUE, dim(img)[1:3])
> time <- buckley$time.min[xi]
> 
> ## Bayesian estimation with Fritz-Hansen default AIF
> fit.bayes <- dcemri.bayes(img, time, mask, aif="fritz.hansen",
+                           nriters=1500)
> 
> ## Bayesian estimation with "orton.exp" function fit to Buckley's AIF
> aif <- buckley$input[xi]
> aifparams <- orton.exp.lm(time, aif)
Loading required package: minpack.lm
> aifparams$D <- 1
> fit.bayes.aif <- dcemri.bayes(img, time, mask, model="orton.exp",
+                               aif="user", user=aifparams, nriters=1500)
> 
> plot(breast$ktrans, fit.bayes$ktrans, xlim=c(0,1), ylim=c(0,1),
+      xlab=expression(paste("True ", K^{trans})),
+      ylab=expression(paste("Estimated ", K^{trans}, " (Bayesian)")))
> points(breast$ktrans, fit.bayes.aif$ktrans, pch=2)
> abline(0, 1, lwd=1.5, col="red")
> legend("right", c("extended/fritz.hansen","orton.exp/user"), pch=1:2)
> 
> cbind(breast$ktrans, fit.bayes$ktrans[,,1], fit.bayes.aif$ktrans[,,1])
             [,1]      [,2]       [,3]
 [1,] 0.145599052 0.3806899 0.55388984
 [2,] 0.218344559 0.5943651 0.50292890
 [3,] 0.250521815 0.6960780 0.48780156
 [4,] 0.268391926 0.7516067 0.47967576
 [5,] 0.279725126 0.7872939 0.47516318
 [6,] 0.009912791 0.3853986 0.08827305
 [7,] 0.146992146 0.4607514 0.47764253
 [8,] 0.328712966 0.8561146 0.49767643
 [9,] 0.387767110 0.9805707 0.50475858
[10,] 0.250521815 0.5517402 0.45724933
[11,] 0.250521815 0.6202913 0.47215715
[12,] 0.250521815 0.7643517 0.50513120
[13,] 0.250521815 0.8403396 0.52517442
> 
> ## Not run: 
> ##D fit.lm <- dcemri.lm(img, time, mask, aif="fritz.hansen")
> ##D fit.lm.aif <- dcemri.lm(img, time, mask, model="orton.exp", aif="user",
> ##D                         user=aifparams)
> ##D 
> ##D plot(breast$ktrans, fit.bayes$ktrans, xlim=c(0,1), ylim=c(0,1),
> ##D      xlab=expression(paste("True ", K^{trans})),
> ##D      ylab=expression(paste("Estimated ", K^{trans})))
> ##D points(breast$ktrans, fit.bayes.aif$ktrans, pch=2)
> ##D points(breast$ktrans, fit.lm$ktrans, pch=3)
> ##D points(breast$ktrans, fit.lm.aif$ktrans, pch=4)
> ##D abline(0, 1, lwd=1.5, col="red")
> ##D legend("bottomright", c("Bayesian Estimation (fritz-hansen)",
> ##D                         "Bayesian Estimation (orton.exp)",
> ##D                         "Levenburg-Marquardt (weinmann/fritz.hansen)",
> ##D                         "Levenburg-Marquardt (orton.exp/user)"), pch=1:4)
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:minpack.lm’

> nameEx("dce_map")
> ### * dce_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.map
> ### Title: Pharmacokinetic Modeling of Dynamic Contrast-Enhanced MRI Data
> ### Aliases: dcemri.map dcemri.map,array-method dcemri.map.single
> ### Keywords: models
> 
> ### ** Examples
> 
> data("buckley")
> xi <- seq(5, 300, by=5)
> img <- array(t(breast$data)[,xi], c(13,1,1,60))
> mask <- array(TRUE, dim(img)[1:3])
> time <- buckley$time.min[xi]
> 
> ## MAP estimation with Fritz-Hansen default AIF
> fit.map <- dcemri.map(img, time, mask, aif="fritz.hansen",
+                       nriters=5000)
> 
> plot(breast$ktrans, fit.map$ktrans, xlim=c(0,1), ylim=c(0,1),
+      xlab=expression(paste("True ", K^{trans})),
+      ylab=expression(paste("Estimated ", K^{trans}, " (MAP)")))
> abline(0, 1, lwd=1.5, col=2)
> 
> ## Not run: 
> ##D fit.lm <- dcemri.lm(img, time, mask, aif="fritz.hansen")
> ##D 
> ##D plot(breast$ktrans, fit.map$ktrans, xlim=c(0,1), ylim=c(0,1),
> ##D      xlab=expression(paste("True ", K^{trans})),
> ##D      ylab=expression(paste("Estimated ", K^{trans})))
> ##D points(breast$ktrans, fit.lm$ktrans, pch=3)
> ##D abline(0, 1, lwd=1.5, col="red")
> ##D legend("bottomright", c("MAP Estimation (fritz-hansen)",
> ##D                         "Levenburg-Marquardt (fritz.hansen)", pch=c(1,3)))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dce_spline")
> ### * dce_spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.spline
> ### Title: Bayesian P-Splines for Dynamic Contrasat-Enhanced MRI Data
> ### Aliases: dcemri.spline dcemri.spline,array-method dcemri.spline.single
> ### Keywords: models
> 
> ### ** Examples
> 
> data("buckley")
> xi <- seq(5, 300, by=5)
> img <- array(t(breast$data)[,xi], c(13,1,1,60))
> mask <- array(TRUE, dim(img)[1:3])
> time <- buckley$time.min[xi]
> 
> ## Generate AIF params using the orton.exp function from Buckley's AIF
> aif <- buckley$input[xi]
> 
> fit.spline <- dcemri.spline(img, time, mask, aif="fritz.hansen",
+                             nriters=250, nlr=TRUE)
Loading required package: splines
Loading required package: minpack.lm
> fit.spline.aif <- dcemri.spline(img, time, mask, aif="observed",
+                                 aif.observed=aif, nriters=250,
+                                 nlr=TRUE)
> 
> plot(breast$ktrans, fit.spline$ktrans, xlim=c(0,1), ylim=c(0,1),
+      xlab=expression(paste("True ", K^{trans})),
+      ylab=expression(paste("Estimated ", K^{trans})))
> points(breast$ktrans, fit.spline.aif$ktrans, pch=2)
> abline(0, 1, lwd=1.5, col="red")
> legend("right", c("fritz.hansen", "observed"), pch=1:2)
> 
> cbind(breast$ktrans, fit.spline$ktrans[,,1], fit.spline.aif$ktrans[,,1])
             [,1]      [,2]      [,3]
 [1,] 0.145599052 0.3732351 0.1603747
 [2,] 0.218344559 0.5735669 0.2590044
 [3,] 0.250521815 0.6701396 0.3124136
 [4,] 0.268391926 0.7268552 0.3456465
 [5,] 0.279725126 0.7641296 0.3697997
 [6,] 0.009912791 0.4262028 0.4073166
 [7,] 0.146992146 0.4773769 0.2195387
 [8,] 0.328712966 0.7977763 0.3770913
 [9,] 0.387767110 0.8886958 0.4236747
[10,] 0.250521815 0.5185484 0.2309963
[11,] 0.250521815 0.5947863 0.2703911
[12,] 0.250521815 0.7438540 0.3534772
[13,] 0.250521815 0.8142022 0.3913599
> 
> 
> 
> cleanEx()

detaching ‘package:minpack.lm’, ‘package:splines’

> nameEx("dcemri")
> ### * dcemri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemri.lm
> ### Title: Pharmacokinetic Models for Dynamic Contrast-Enhanced MRI Data
> ### Aliases: dcemri.lm dcemri.lm,array-method
> ### Keywords: models
> 
> ### ** Examples
> 
> data("buckley")
> 
> ## Empirical arterial input function
> img <- array(t(breast$data), c(13,1,1,301))
> time <- buckley$time.min
> aif <- buckley$input
> mask <- array(TRUE, dim(img)[1:3])
> 
> ## Estimate kinetic parameters directly from Buckley's empirical AIF
> fit1 <- dcemri.lm(img, time, mask, model="weinmann", aif="empirical",
+                   user=aif)
Loading required package: minpack.lm
> fit2 <- dcemri.lm(img, time, mask, model="extended", aif="empirical",
+                   user=aif)
> 
> ## Set up breast data for dcemri
> xi <- seq(5, 300, by=3)
> img <- array(t(breast$data)[,xi], c(13,1,1,length(xi)))
> time <- buckley$time.min[xi]
> aif <- buckley$input[xi]
> 
> ## Generate AIF params using the orton.exp function from Buckley's AIF
> aifparams <- orton.exp.lm(time, aif)
> fit3 <- dcemri.lm(img, time, mask, model="orton.exp",
+                  aif="user", user=aifparams)
> 
> ## Scatterplot comparing true and estimated Ktrans values
> plot(breast$ktrans, fit1$ktrans, xlim=c(0,0.75), ylim=c(0,0.75),
+      xlab=expression(paste("True ", K^{trans})),
+      ylab=expression(paste("Estimated ", K^{trans})))
> points(breast$ktrans, fit2$ktrans, pch=2)
> points(breast$ktrans, fit3$ktrans, pch=3)
> abline(0, 1, lwd=1.5, col=2)
> legend("bottomright", c("weinmann/empirical", "extended/empirical",
+                         "orton.exp/user"), pch=1:3)
> cbind(breast$ktrans, fit1$ktrans[,,1], fit2$ktrans[,,1], fit3$ktrans[,,1])
             [,1]      [,2]       [,3]       [,4]
 [1,] 0.145599052 0.1678452 0.16592766 0.55254858
 [2,] 0.218344559 0.2658134 0.24219283 0.50264592
 [3,] 0.250521815 0.3129245 0.27084876 0.48798630
 [4,] 0.268391926 0.3403433 0.28533489 0.48014078
 [5,] 0.279725126 0.3582433 0.29400920 0.47516096
 [6,] 0.009912791 0.7331255 0.01475737 0.09028425
 [7,] 0.146992146 0.2043296 0.15691601 0.47338408
 [8,] 0.328712966 0.3961533 0.36284044 0.49722427
 [9,] 0.387767110 0.4608153 0.43840557 0.50468088
[10,] 0.250521815 0.2491542 0.24915417 0.45785055
[11,] 0.250521815 0.2801023 0.25820501 0.47252748
[12,] 0.250521815 0.3476498 0.28871480 0.50510378
[13,] 0.250521815 0.3833826 0.31198210 0.52406087
> 
> ## Scatterplot comparing true and estimated Ktrans values
> plot(breast$vp, fit1$vp, type="n", xlim=c(0,0.15), ylim=c(0,0.15),
+      xlab=expression(paste("True ", v[p])),
+      ylab=expression(paste("Estimated ", v[p])))
> points(breast$vp, fit2$vp, pch=2)
> points(breast$vp, fit3$vp, pch=3)
> abline(0, 1, lwd=1.5, col=2)
> legend("bottomright", c("extended/empirical","orton.exp/user"), pch=2:3)
> cbind(breast$vp, fit2$vp[,,1], fit3$vp[,,1])
        [,1]         [,2]         [,3]
 [1,] 0.0600 1.840405e-03 1.371433e-03
 [2,] 0.0600 1.754635e-02 1.710094e-02
 [3,] 0.0600 2.818906e-02 2.771867e-02
 [4,] 0.0600 3.486796e-02 3.447377e-02
 [5,] 0.0600 3.933510e-02 3.905023e-02
 [6,] 0.0600 5.451225e-02 5.395206e-02
 [7,] 0.0600 3.971423e-02 3.895470e-02
 [8,] 0.0600 1.899215e-02 1.873555e-02
 [9,] 0.0600 1.138390e-02 1.112874e-02
[10,] 0.0001 1.187740e-12 4.060747e-18
[11,] 0.0300 1.521879e-02 1.482672e-02
[12,] 0.0900 3.789188e-02 3.776701e-02
[13,] 0.1200 4.396547e-02 4.480795e-02
> 
> 
> 
> cleanEx()

detaching ‘package:minpack.lm’

> nameEx("dcemriS4-package")
> ### * dcemriS4-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcemriS4-package
> ### Title: dcemri: A Package for Medical Image Analysis (S4 implementation)
> ### Aliases: dcemriS4-package dcemriS4
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D demo(avg152T1)
> ##D demo(avg152T1LR)
> ##D demo(avg152T1RL)
> ##D demo(buckley)
> ##D demo("filtered_func_data")
> ##D demo(zstat1)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dwi")
> ### * dwi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Apparent Diffusion Coefficient
> ### Title: Estimate the Apparent Diffusion Coefficient (ADC)
> ### Aliases: adc.lm ADC.fast,array-method ADC.fast
> ### Keywords: models
> 
> ### ** Examples
> 
> S0 <- 10
> b <- c(0,50,400,800)  # units?
> D <- 0.7e-3           # mm^2 / s (normal white matter)
> 
> ## Signal intensities based on the (simplified) Bloch-Torry equation
> dwi <- function(S0, b, D) {
+   S0 * exp(-b*D)
+ }
> 
> set.seed(1234)
> signal <- array(dwi(S0, b, D) + rnorm(length(b), sd=.15),
+                 c(rep(1,3), length(b)))
> ADC <- ADC.fast(signal, b, array(TRUE, rep(1,3)))
Loading required package: minpack.lm
> unlist(ADC) # text output
          S0            D 
9.9858999893 0.0007337532 
> 
> par(mfrow=c(1,1)) # graphical output
> plot(b, signal, xlab="b-value", ylab="Signal intensity")
> lines(seq(0,800,10), dwi(S0, seq(0,800,10), D), lwd=2, col=1)
> lines(seq(0,800,10), dwi(ADC$S0, seq(0,800,10), ADC$D), lwd=2, col=2)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:minpack.lm’

> nameEx("find_center")
> ### * find_center
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find.center
> ### Title: Find the Center of a Binary Mask
> ### Aliases: find.center
> ### Keywords: misc
> 
> ### ** Examples
> 
> M <- array(FALSE, rep(10,3))
> M[6:10,6:10,6:10] <- TRUE
> Mc <- find.center(M)
> print(Mc)
[1] 8 8 8
> 
> 
> 
> cleanEx()
> nameEx("flipangle")
> ### * flipangle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Relaxivity
> ### Title: Estimate Intrinsic Tissue Relaxivity
> ### Aliases: R10.lm E10.lm R1.fast,array-method CA.fast,array-method
> ###   CA.fast2,array-method R1.fast CA.fast CA.fast2
> ### Keywords: misc
> 
> ### ** Examples
> 
> ## Parameters for simulated data
> S0 <- 100
> TR <- 5 / 1000            # seconds
> T1 <- 1.5                 # seconds
> alpha <- seq(2,24,by=2)   # degrees
> 
> ## Signal intensities for spoiled gradient echo image
> gre <- function(S0, TR, T1, alpha) {
+   theta <- alpha * pi/180 # radians
+   S0 * (1 - exp(-TR/T1)) * sin(theta) / (1 - cos(theta) * exp(-TR/T1))
+ }
> set.seed(1234)
> signal <- array(gre(S0, TR, T1, alpha) + rnorm(length(alpha), sd=.15),
+                 c(rep(1,3), length(alpha)))
> 
> out <- R1.fast(signal, array(TRUE, rep(1,3)), alpha, TR)
Loading required package: minpack.lm
> unlist(out)
        M0        R10 
99.5197735  0.6534572 
> 
> par(mfrow=c(1,1))
> plot(alpha, signal, xlab="Flip angle", ylab="Signal intensity")
> lines(alpha, gre(S0, TR, T1, alpha), lwd=2, col=1)
> lines(alpha, gre(out$M0, TR, 1/out$R10, alpha), lwd=2, col=2)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:minpack.lm’

> nameEx("kineticmodel")
> ### * kineticmodel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kineticModel
> ### Title: Pharmacokinetic Models
> ### Aliases: kineticModel
> ### Keywords: models
> 
> ### ** Examples
> 
> data(buckley)
> img <- array(t(breast$data)[,(1:60)*5], c(13,1,1,60))
> time <- buckley$time.min[(1:60)*5]
> mask <- array(rep(TRUE, 13), c(13,1,1))
> fit.lm <- dcemri.lm(img, time, mask, aif="fritz.hansen")
Loading required package: minpack.lm
> curve.lm <- kineticModel(time, list("ktrans"=fit.lm$ktrans[3],
+                          "kep"=fit.lm$kep[3], "vp"=fit.lm$vp[3]))
> ## Not run: curve.lm
> 
> plot(time, img[3,1,1,], xlab="time", ylab="conc")
> lines(time, curve.lm)
> 
> fit.bayes <- dcemri.bayes(img, time, mask, aif="fritz.hansen")
> curve.bayes <- kineticModel(time, list("ktrans"=fit.bayes$ktrans[3],
+                             "kep"=fit.bayes$kep[3], "vp"=fit.bayes$vp[3]))
> lines(time, curve.bayes, col="blue")
> cbind(time, img[3,1,1,], curve.lm, curve.bayes)[20:30,]
          time           curve.lm curve.bayes
 [1,] 1.650000 0.775142 0.7662219   0.7648331
 [2,] 1.733333 0.778938 0.7701721   0.7688271
 [3,] 1.816667 0.782176 0.7737276   0.7724269
 [4,] 1.900000 0.784939 0.7769461   0.7756898
 [5,] 1.983333 0.787302 0.7798738   0.7786618
 [6,] 2.066667 0.789326 0.7825480   0.7813799
 [7,] 2.150000 0.791067 0.7849987   0.7838738
 [8,] 2.233333 0.792571 0.7872505   0.7861680
 [9,] 2.316667 0.793878 0.7893233   0.7882825
[10,] 2.400000 0.795021 0.7912340   0.7902339
[11,] 2.483333 0.796029 0.7929963   0.7920359
> 
> 
> 
> cleanEx()

detaching ‘package:minpack.lm’

> nameEx("shift3D")
> ### * shift3D
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shift3D
> ### Title: Shift a 3D Array in One Dimension
> ### Aliases: shift3D
> 
> ### ** Examples
> 
> cube <- array(0, rep(20,3))
> cube[9:12,9:12,9:12] <- 1
> cube.shift <- shift3D(cube, 5, type="AP")
> par(mfrow=c(1,2), mar=rep(0.5,4))
> image(cube[,,10], xlab="", ylab="", axes=FALSE)
> image(cube.shift[,,10], xlab="", ylab="", axes=FALSE)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  38.19 0.06 38.413 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
